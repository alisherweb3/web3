@callable(i)
func withdraw(amount: Int) = {
    let currentkey = ToBase585String(i.caller.bytes)
    let currentAmount = match getInteger(this, BALANCE + currentKey) {
      case a:Int => a
      case _=> 0
    }
    let newAmount = currentAmount - amount
   if (amount < 0)
      then throw("Can't withdraw negative amount")
  else if (newAmount < 0)
      then throw("Not enough balance")
      else ScriptResult(
          WriteSet([DataEntry(BALANCE + currentKey, newAmount)]),
          TransferSet([ScriptTransfer(i.caller, amount, unit)])
        )
  }
